model_002_011_coef <- arima(temp_ts, order = c(0,0,2), seasonal=list(order=c(0,1,1), period=12), method = 'ML')
coeftest(model_002_011_coef)
model_002_011 <- arima(temp_ts, order = c(0,0,2), seasonal=list(order=c(0,1,1), period=12))
residual.analysis(model = model_002_011)
AIC(model_002_011)
BIC(model_002_011)
AIC(model_002_011, model_002_012, model_002_112, model_102_012, model_102_112, model_202_012, model_202_112)
BIC(model_002_011, model_002_012, model_002_112, model_102_012, model_102_112, model_202_012, model_202_112)
plot(model_002_011, n.ahead = 24)
dev.off()
plot(model_002_011, n.ahead = 24)
?AID
plot(model_002_011, n.ahead = 24)
residual.analysis(model = model_002_011)
eacf(temp_ts)
eacf(temp_ts_diff_lag12)
g3
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
g3 <- ggplot(mod_df_success, aes(x = product_name, y = success_rate))+
geom_bar(stat = 'identity', alpha = 0.85, fill = "#ff9f6a")+
theme_dark()+
theme(axis.text.x = element_text(angle = 45, size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size=17),
legend.title =  element_text(size=19),
title = element_text(size=27),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))+
scale_fill_manual(values=c("#ff9f6a"))+
labs(title = 'Making sales for different search types')#+
g3
g3 <- ggplot(mod_df_success, aes(x = product_name, y = success_rate))+
geom_bar(stat = 'identity', alpha = 0.85, fill = "#ff9f6a")+
theme_dark()+
theme(axis.text.x = element_text(angle = 45, size = 15, hjust = 1),
axis.text.y = element_text(size = 15),
legend.text = element_text(size=17),
legend.title =  element_text(size=19),
title = element_text(size=27),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))+
scale_fill_manual(values=c("#ff9f6a"))+
labs(title = 'Making sales for different search types')#+
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
View(df)
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
g3
g3 <- ggplot(mod_df_success, aes(x = product_name, y = success_rate))+
geom_bar(stat = 'identity', alpha = 0.85, fill = "#ff9f6a")+
theme_dark()+
theme(axis.text.x = element_text(angle = 45, size = 17, hjust = 1),
axis.text.y = element_text(size = 17),
legend.text = element_text(size=17),
legend.title =  element_text(size=19),
title = element_text(size=27),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))+
scale_fill_manual(values=c("#ff9f6a"))+
labs(title = 'Propensity to buy for different search types', x = '', y = 'sales conversion')
g3
online_products <- df %>%
filter(Sale_source=='online') %>%
group_by(product_name) %>%
summarise(online_sales_count = n())
g1 <- ggplot(channels_long, aes(x = product_name, y = count, fill = sales_type))+
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.85)+
theme_dark()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size=17),
legend.title =  element_text(size=19),
title = element_text(size=27),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))+
labs(title = 'Comparing online and call centre sales ')+
scale_fill_manual(values=c("#ff9f6a", "#fd1f58"))
g1 <- ggplot(channels_long, aes(x = product_name, y = count, fill = sales_type))+
geom_bar(stat = 'identity', position = 'dodge', alpha = 0.85)+
theme_dark()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15),
axis.text.y = element_text(size = 15),
legend.text = element_text(size=17),
legend.title =  element_text(size=19),
title = element_text(size=27),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17))+
labs(title = 'Comparing online and call centre sales ')+
scale_fill_manual(values=c("#ff9f6a", "#fd1f58"))
g1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache=TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(caret)
library(readxl)
library(zoo)
file_path = "C:/Users/ben/Documents/code/R/iselect/Internship Dataset.xlsx"
df <- readxl::read_xlsx(path = file_path, sheet = 'Data')
str(df)
dim(df)
length(unique(df$Customer_ID))
unique(df$provider_Nm)
length(unique(df$product_name))
table(df$Sale_source, useNA = 'always')
# duplicates?
sum(duplicated(df))
# how many sales made
sum(df$Sale_made)
# sales analysis
df_sales <- df %>% group_by(Customer_ID) %>% summarise(sales_count = sum(Sale_made))
#
# of the 628 customers, how many purchased?
sum(df_sales$sales_count>0)
# sometimes people buy more than one product, What's the distribution of number of products bought?
table(df_sales$sales_count)
# what's the average rank of sold product?
average_rank <- df %>%
filter(Sale_made==1) %>%
mutate(repeat_customer = 99)
df %>% filter(result_rank==1) %>% select(product_name) %>% table() %>% sort(decreasing=TRUE)
max(df$result_rank)
summary(df$result_rank)
max_ranks <- df %>% group_by(Customer_ID) %>% summarise(mmm = max(result_rank)) %>% select(mmm)
max_ranks
mean(max_ranks$mmm)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE)
library(dplyr)
library(TSA)
library(fUnitRoots)
library(lmtest)
library(AID)
library(lubridate)
ts_plots <- function(ts){
old.par <- par(mfrow=c(3, 1))
plot(ts, type = 'o')
acf(ts)
pacf(ts)
par(old.par)
}
residual.analysis <- function(model, std = TRUE,start = 2, class = c("ARIMA","GARCH","ARMA-GARCH")[1]){
# If you have an output from arima() function use class = "ARIMA"
# If you have an output from garch() function use class = "GARCH"
# If you have an output from ugarchfit() function use class = "ARMA-GARCH"
library(TSA)
library(FitAR)
if (class == "ARIMA"){
if (std == TRUE){
res.model = rstandard(model)
}else{
res.model = residuals(model)
}
}else if (class == "GARCH"){
res.model = model$residuals[start:model$n.used]
}else if (class == "ARMA-GARCH"){
res.model = model@fit$residuals
}else {
stop("The argument 'class' must be either 'ARIMA' or 'GARCH' ")
}
par(mfrow=c(3,2))
plot(res.model,type='o',ylab='Standardised residuals', main="Time series plot of standardised residuals")
abline(h=0)
hist(res.model,main="Histogram of standardised residuals")
qqnorm(res.model,main="QQ plot of standardised residuals")
qqline(res.model, col = 2)
acf(res.model,main="ACF of standardised residuals")
pacf(res.model,main="ACF of standardised residuals")
print(shapiro.test(res.model))
k=0
LBQPlot(res.model, lag.max = 30, StartLag = k + 1, k = 0, SquaredQ = FALSE)
}
file_name <- "C:/Users/ben/Documents/Learning/RMIT/rmit_2017_sem1/Time_Series_Analysis/Final_Assignment/daily-minimum-temperatures-in-me.csv"
temp_df <- read.csv(file = file_name, skip = 1, header = FALSE, stringsAsFactors = FALSE)
names(temp_df) <- c('date', 'value')
temp_df$value <- as.numeric(temp_df$value)
temp_df$date <- ymd(temp_df$date)
temp_df$month <- month(temp_df$date)
temp_df$year <- year(temp_df$date)
temp_df_monthly <- temp_df %>% group_by(year, month) %>% summarise(month_av = mean(value, na.rm = TRUE))
temp_df_monthly <- temp_df_monthly[complete.cases(temp_df_monthly),]
temp_ts <- ts(temp_df_monthly$month_av, start = c(1981,1), end = c(1990,12), frequency = 12)
dev.off()
#dev.off()
plot(y = temp_ts, x = as.vector(time(temp_ts)), type = 'l',
xlab = "Year", ylab = "Temperature (Degrees Celcius)", main = "Monthly temperature in Melbourne")
points(y = temp_ts, x = as.vector(time(temp_ts)), pch = as.vector(season(temp_ts)))
ts_plots(temp_ts)
ar(temp_ts)
fUnitRoots::adfTest(temp_ts, lags = 11, type = 'ct')
BoxCox.ar(temp_ts)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message = FALSE, warning = FALSE, fig.width=14, fig.height=10)
ar(temp_ts_diff_lag12)
temp_ts_diff_lag12 <- diff(temp_ts, lag = 12)
ts_plots(temp_ts_diff_lag12)
ar(temp_ts_diff_lag12)
fUnitRoots::adfTest(temp_ts_diff_lag12, lags = 12, type = 'ct')
BoxCox.ar(temp_ts)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
library(tidyr)
library(dplyr)
library(TSA)
library(fUnitRoots)
library(FSAdata)
library(lmtest)
library(AID)
library(forecast)
library(CombMSC)
library(fGarch)
data("larain")
#plot(larain)
BoxCox.ar(larain)
lambda = 0.2
larain_boxcox = (larain^lambda - 1) / lambda
plot(larain_boxcox)
data("larain")
#plot(larain)
BoxCox.ar(larain)
lambda = 0.2
larain_boxcox = (larain^lambda - 1) / lambda
#plot(larain_boxcox)
library(TSA)
library(tseries)
library(FitAR)
yahoo <- read.csv("C:/Users/ben/Documents/Learning/RMIT/rmit_2017_sem1/Time_Series_Analysis/task_9/yahoo.csv")
data = yahoo$Adj.Close
data = ts(data)
plot(data,ylab='Closing price', main = "Dailiy closing price for Yahoo sahers in Nasdaq")
r.yahoo=diff(log(data))*100
plot(r.yahoo,ylab='Closing price', main = "Dailiy return series for Yahoo sahers in Nasdaq")
acf(r.yahoo, main="The sample ACF plot for return series")
pacf(r.yahoo, main="The sample PACF plot for return series")
eacf(r.yahoo)
McLeod.Li.test(y=r.yahoo,main="McLeod-Li test statistics for Daily return series")
qqnorm(r.yahoo,main="Q-Q Normal Plot of Daily Returns")
qqline(r.yahoo)
abs.r.yahoo = abs(r.yahoo)
acf(abs.r.yahoo, ci.type="ma",main="The sample ACF plot for return series")
pacf(abs.r.yahoo, main="The sample PACF plot for return series")
eacf(abs.r.yahoo)
sq.r.yahoo = r.yahoo^2
acf(sq.r.yahoo, main="The sample ACF plot for return series")
pacf(sq.r.yahoo, main="The sample PACF plot for return series")
eacf(sq.r.yahoo)
sq.r.yahoo = r.yahoo^2
acf(sq.r.yahoo, main="The sample ACF plot for return series")
pacf(sq.r.yahoo, main="The sample PACF plot for return series")
eacf(sq.r.yahoo)
eacf(abs.r.yahoo)
eacf(sq.r.yahoo)
shiny::runApp('code/R/First_ShinyApp')
install.packages('cowplot')
runApp('code/R/First_ShinyApp')
runApp('code/R/First_ShinyApp')
library(shiny)
library(ggplot2)
library(dplyr)
library(rsconnect)
library(cowplot)
setwd("C:/Users/ben/Documents/code/R/First_ShinyApp")
load("salary_field_gender")
load("salary_field")
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Starting Salary by Field"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "GroupID",
label = "" ,
choices = levels(table1$field)[levels(table1$field)!="Median"]
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Starting Salary", plotOutput("plot1")),
tabPanel("Separate by Gender", plotOutput("plot2")),
tabPanel("About the Data",
textOutput("text0"),
textOutput("text1"),
helpText(a("\n     Click here to view the download page, pick the Education xls file", href = "http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/4125.0Feb%202016?OpenDocument")),
helpText(a("\n     or click here to download the data set directly", href = "http://www.abs.gov.au/ausstats/SUBSCRIBER.NSF/log?openagent&41250ds0002_201602.xls&4125.0&Data%20Cubes&68EB79EDE3345E74CA257F61002084F0&0&Feb%202016&23.02.2016&Latest")),
textOutput("text2")
),
class = "rightAlign")
)
)#end of sidebarLayout
))
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Starting Salary by Field"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "GroupID",
label = "" ,
choices = levels(table1$field)[levels(table1$field)!="Median"]
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Starting Salary", plotOutput("plot1")),
tabPanel("Separate by Gender", plotOutput("plot2")),
tabPanel("About the Data",
textOutput("text0"),
textOutput("text1"),
helpText(a("\n     Click here to view the download page, pick the Education xls file", href = "http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/4125.0Feb%202016?OpenDocument")),
helpText(a("\n     or click here to download the data set directly", href = "http://www.abs.gov.au/ausstats/SUBSCRIBER.NSF/log?openagent&41250ds0002_201602.xls&4125.0&Data%20Cubes&68EB79EDE3345E74CA257F61002084F0&0&Feb%202016&23.02.2016&Latest")),
textOutput("text2")
),
cclass = "rightAlign")
)
)#end of sidebarLayout
))
titlePanel("Starting Salary by Field"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "GroupID",
label = "" ,
choices = levels(table1$field)[levels(table1$field)!="Median"]
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Starting Salary", plotOutput("plot1")),
tabPanel("Separate by Gender", plotOutput("plot2")),
tabPanel("About the Data",
textOutput("text0"),
textOutput("text1"),
helpText(a("\n     Click here to view the download page, pick the Education xls file", href = "http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/4125.0Feb%202016?OpenDocument")),
helpText(a("\n     or click here to download the data set directly", href = "http://www.abs.gov.au/ausstats/SUBSCRIBER.NSF/log?openagent&41250ds0002_201602.xls&4125.0&Data%20Cubes&68EB79EDE3345E74CA257F61002084F0&0&Feb%202016&23.02.2016&Latest")),
textOutput("text2")
)#,
#class = "rightAlign")
)
)#end of sidebarLayout
))
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Starting Salary by Field"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "GroupID",
label = "" ,
choices = levels(table1$field)[levels(table1$field)!="Median"]
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Starting Salary", plotOutput("plot1")),
tabPanel("Separate by Gender", plotOutput("plot2")),
tabPanel("About the Data",
textOutput("text0"),
textOutput("text1"),
helpText(a("\n     Click here to view the download page, pick the Education xls file", href = "http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/4125.0Feb%202016?OpenDocument")),
helpText(a("\n     or click here to download the data set directly", href = "http://www.abs.gov.au/ausstats/SUBSCRIBER.NSF/log?openagent&41250ds0002_201602.xls&4125.0&Data%20Cubes&68EB79EDE3345E74CA257F61002084F0&0&Feb%202016&23.02.2016&Latest")),
textOutput("text2")
)#,
)#class = "rightAlign")
)
)#end of sidebarLayout
))
server <- shinyServer(function(input, output) {
#set wd
# setwd("/home/ben/2016 Sem 1/Data Visualisation/Assignment3/Starting_Salary")
# table1
load("salary_field_gender")
# table2
load("salary_field")
tt <- reactive({ as.character(input$GroupID) })
output$plot1 <- renderPlot({
#print(tt())
g1 <- ggplot(table2 %>% filter( field %in% tt() ),
aes(x = year, y = avg.salary, colour = field))+
geom_point()+
geom_line() +
labs(y = "Starting Salary (AU$ thousand)") +
ylim(c(30,90))
g2 <- geom_line(data = table2 %>% filter(field == "Median"),
aes(x = year, y = avg.salary, colour = field), colour = "black")#+
g3 <- geom_point(data = table2 %>% filter(field == "Median"),
aes(x = year, y = avg.salary, colour = field), colour = "black")#+
g4 <- g1+g2+g3
ggdraw(add_sub(g4, "\n *The black line in the median starting salary for all fields"))
})
output$plot2 <- renderPlot({
g1 <- ggplot(table1 %>%  filter( field %in% c("Median", tt()) ),
aes(x = year, y = salary, colour = gender))+
geom_point()+
geom_line() +
labs(y = "Starting Salary (AU$ thousand)") +
facet_grid(.~field)
g1
})
output$text0 <- renderText({ "\n "})
output$text1 <- renderText({ "The Data is from the Australian Bureau of Statistics.
\n     Gender Indicators, Australia, Feb 2016"})
output$text2 <- renderText({ "\n   - Ben Phillips" })
})
shinyApp(ui = ui, server = server)
library(colorBrewer)
install.packages('colorBrewer')
library(colorBrewer)
palette(rainbow(6))
palette(rainbow(6))
a <- palette(rainbow(6))
a
a <- palette(rainbow(20))
a
my_colours <- c("#9d6031","#546dd6","#a0b53c","#9f5ed1","#55b64f","#c74cae","#529d68","#dd4785","#4bc1b5","#cf4d2c","#4c9ad1","#e0883b","#9d95df","#c5a44d","#735a9e","#6d7930","#d585c4","#c94250","#a04b6d","#e18680")
runApp()
my_fields <- c("Accounting","Agricultural Science","Architecture & Building","Art & Design ",
"Biological Sciences","Computer Science","Dentistry","Earth Sciences",
"Economics, Business","Education","Engineering","Humanities","Law","Mathematics",
"Medicine","Paramedical Studies","Pharmacy (pre-reg)","Physical Sciences",
"Psychology","Social Sciences")
table2$field
class(table2$field)
table2$field <- factor(x = table2$field, levels = my_colours)
runApp()
runApp()
runApp()
runApp()
runApp()
library(cowplot)
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(rsconnect)
setwd("C:/Users/ben/Documents/code/R/First_ShinyApp")
load("salary_field_gender")
load("salary_field")
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Starting Salary by Field"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "GroupID",
label = "" ,
choices = levels(table1$field)[levels(table1$field)!="Median"]
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Starting Salary", plotOutput("plot1")),
tabPanel("Separate by Gender", plotOutput("plot2")),
tabPanel("About the Data",
textOutput("text0"),
textOutput("text1"),
helpText(a("\n     Click here to view the download page, pick the Education xls file", href = "http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/4125.0Feb%202016?OpenDocument")),
helpText(a("\n     or click here to download the data set directly", href = "http://www.abs.gov.au/ausstats/SUBSCRIBER.NSF/log?openagent&41250ds0002_201602.xls&4125.0&Data%20Cubes&68EB79EDE3345E74CA257F61002084F0&0&Feb%202016&23.02.2016&Latest")),
textOutput("text2")
)#,
)#class = "rightAlign")
)
)#end of sidebarLayout
))
server <- shinyServer(function(input, output) {
#set wd
# setwd("C:/Users/ben/Documents/code/R/First_ShinyApp")
# table1
load("salary_field_gender")
# table2
load("salary_field")
#my_colours <- c("#9d6031","#546dd6","#a0b53c","#9f5ed1","#55b64f","#c74cae","#529d68","#dd4785","#4bc1b5","#cf4d2c","#4c9ad1","#e0883b","#9d95df","#c5a44d","#735a9e","#6d7930","#d585c4","#c94250","#a04b6d","#e18680")
# my_fields <- c("Accounting","Agricultural Science","Architecture & Building","Art & Design ",
#                "Biological Sciences","Computer Science","Dentistry","Earth Sciences",
#                "Economics, Business","Education","Engineering","Humanities","Law","Mathematics",
#               "Medicine","Paramedical Studies","Pharmacy (pre-reg)","Physical Sciences",
#               "Psychology","Social Sciences")
#table2$field <- factor(x = table2$field, levels = my_colours)
tt <- reactive({ as.character(input$GroupID) })
output$plot1 <- renderPlot({
#print(tt())
g1 <- ggplot(table2 %>% filter( field %in% tt() ),
aes(x = year, y = avg.salary, colour = field))+
geom_point()+
geom_line() +
labs(y = "Starting Salary (AU$ thousand)") +
ylim(c(30,90))
g2 <- geom_line(data = table2 %>% filter(field == "Median"),
aes(x = year, y = avg.salary, colour = field), colour = "black")#+
g3 <- geom_point(data = table2 %>% filter(field == "Median"),
aes(x = year, y = avg.salary, colour = field), colour = "black")#+
g4 <- g1+g2+g3
ggdraw(add_sub(g4, "\n *The black line is the average starting salary for all fields"))
})
output$plot2 <- renderPlot({
g1 <- ggplot(table1 %>%  filter( field %in% c("Median", tt()) ),
aes(x = year, y = salary, colour = gender))+
geom_point()+
geom_line() +
labs(y = "Starting Salary (AU$ thousand)") +
facet_grid(.~field)
g1
})
output$text0 <- renderText({ "\n "})
output$text1 <- renderText({ "The Data is from the Australian Bureau of Statistics.
\n     Gender Indicators, Australia, Feb 2016"})
output$text2 <- renderText({ "\n   - Ben Phillips" })
})
shinyApp(ui = ui, server = server)
